name: Terraform CD (Matrix)

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action"
        required: true
        default: "plan"
        type: choice
        options: [plan, apply, destroy]
      start_env:
        description: "Start environment"
        required: true
        default: "dev"
        type: choice
        options: [dev, stage, prod]
      end_env:
        description: "End environment"
        required: true
        default: "prod"
        type: choice
        options: [dev, stage, prod]

env:
  AWS_REGION: ap-south-1
  TF_DIR: terraform

permissions:
  contents: write
  issues: write

# ---------------------------------------------------
# 1. BUILD MATRIX
# ---------------------------------------------------
jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      env_matrix: ${{ steps.range.outputs.env_matrix }}
    steps:
      - name: Build dynamic environment matrix
        id: range
        run: |
          environments=("dev" "stage" "prod")
          start="${{ github.event.inputs.start_env }}"
          end="${{ github.event.inputs.end_env }}"

          found_start=false
          include_envs=()

          for env in "${environments[@]}"; do
            if [ "$env" == "$start" ]; then
              found_start=true
            fi
            if [ "$found_start" = true ]; then
              include_envs+=("\"$env\"")
            fi
            if [ "$env" == "$end" ]; then
              break
            fi
          done

          result=$(IFS=,; echo "[${include_envs[*]}]")
          echo "env_matrix=$result" >> $GITHUB_OUTPUT
          echo "‚úÖ Matrix will run for: $result"

# ---------------------------------------------------
# 2. TERRAFORM LOGIC PER ENVIRONMENT
# ---------------------------------------------------
  terraform:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.set-matrix.outputs.env_matrix) }}
      max-parallel: 1   # sequential for easy demo understanding

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform -chdir=${{ env.TF_DIR }} init

      - name: Select or Create Workspace
        run: |
          echo "üîç Checking workspace: ${{ matrix.environment }}"
          terraform -chdir=${{ env.TF_DIR }} workspace select ${{ matrix.environment }} 2>/dev/null \
            || terraform -chdir=${{ env.TF_DIR }} workspace new ${{ matrix.environment }}
          echo "‚úÖ Workspace ready: $(terraform -chdir=${{ env.TF_DIR }} workspace show)"

      - name: Terraform Plan
        id: plan
        run: |
          echo "üöÄ Running Terraform plan for ${{ matrix.environment }}"
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform -chdir=${{ env.TF_DIR }} plan -destroy -var-file=env/${{ matrix.environment }}.tfvars -out=tfplan
          else
            terraform -chdir=${{ env.TF_DIR }} plan -var-file=env/${{ matrix.environment }}.tfvars -out=tfplan
          fi
          terraform -chdir=${{ env.TF_DIR }} show -no-color tfplan > plan.txt

# ---------------------------------------------------
# 3. APPROVAL + AUTO-CLOSE LOGIC
# ---------------------------------------------------
      - name: Create Approval Issue
        if: github.event.inputs.action != 'plan'
        id: issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Approve Terraform: ${{ github.event.inputs.action }} ‚Üí ${{ matrix.environment }}"
          content-filepath: plan.txt
          labels: terraform, approval
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Approval Comment
        if: github.event.inputs.action != 'plan'
        id: approval
        run: |
          issue_number=${{ steps.issue.outputs.issue-number }}
          echo "üëâ Waiting for approval on issue #$issue_number"

          for i in {1..15}; do
            comment=$(gh issue view $issue_number --json comments --jq '.comments[-1].body' || echo "")
            if [[ "$comment" =~ ^[Yy][Ee][Ss]$ ]]; then
              echo "approval=yes" >> $GITHUB_OUTPUT
              break
            elif [[ "$comment" =~ ^[Nn][Oo]$ ]]; then
              echo "approval=no" >> $GITHUB_OUTPUT
              break
            fi
            echo "‚è≥ Waiting... ($i/15)"
            sleep 10
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Close Issue (Approved)
        if: steps.approval.outputs.approval == 'yes'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ steps.issue.outputs.issue-number }}
          comment: |
            ‚úÖ Approved by @${{ github.actor }}
            Action: ${{ github.event.inputs.action }}
            Environment: ${{ matrix.environment }}

      - name: Auto Close Issue (Declined)
        if: steps.approval.outputs.approval == 'no'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ steps.issue.outputs.issue-number }}
          comment: |
            ‚ùå Cancelled by @${{ github.actor }}
            Environment: ${{ matrix.environment }}

# ---------------------------------------------------
# 4. EXECUTION BASED ON APPROVAL
# ---------------------------------------------------
      - name: Terraform Apply
        if: steps.approval.outputs.approval == 'yes' && github.event.inputs.action == 'apply'
        run: terraform -chdir=${{ env.TF_DIR }} apply -auto-approve -var-file=env/${{ matrix.environment }}.tfvars

      - name: Terraform Destroy
        if: steps.approval.outputs.approval == 'yes' && github.event.inputs.action == 'destroy'
        run: terraform -chdir=${{ env.TF_DIR }} destroy -auto-approve -var-file=env/${{ matrix.environment }}.tfvars
