name: Terraform CD (Matrix Env Promotion)

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action (plan, apply, destroy)"
        required: true
        default: "plan"
        type: choice
        options: [plan, apply, destroy]
      start_env:
        description: "Start environment"
        required: true
        default: "dev"
        type: choice
        options: [dev, stage, prod]
      end_env:
        description: "End environment"
        required: true
        default: "prod"
        type: choice
        options: [dev, stage, prod]

env:
  AWS_REGION: ap-south-1
  TF_DIR: terraform

permissions:
  contents: write
  issues: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, stage, prod]
      max-parallel: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # üß† Simplified skip logic (ordered promotion)
      - name: Skip if environment not in selected range
        id: skip-check
        run: |
          declare -A order=(["dev"]=1 ["stage"]=2 ["prod"]=3)
          start=${{ github.event.inputs.start_env }}
          end=${{ github.event.inputs.end_env }}
          current=${{ matrix.environment }}

          if [ ${order[$current]} -lt ${order[$start]} ] || [ ${order[$current]} -gt ${order[$end]} ]; then
            echo "‚è© Skipping $current (not in range $start ‚Üí $end)"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Processing $current"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop skipped environments
        if: steps.skip-check.outputs.skip == 'true'
        run: exit 0

      - name: Terraform Init
        run: terraform -chdir=${{ env.TF_DIR }} init

      - name: Select or Create Workspace
        run: |
          terraform -chdir=${{ env.TF_DIR }} workspace select ${{ matrix.environment }} \
            || terraform -chdir=${{ env.TF_DIR }} workspace new ${{ matrix.environment }}

      - name: Terraform Plan
        id: plan
        run: |
          echo "üì¶ Using workspace: $(terraform -chdir=${{ env.TF_DIR }} workspace show)"
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform -chdir=${{ env.TF_DIR }} plan -destroy \
              -var-file=env/${{ matrix.environment }}.tfvars -out=tfplan
          else
            terraform -chdir=${{ env.TF_DIR }} plan \
              -var-file=env/${{ matrix.environment }}.tfvars -out=tfplan
          fi
          terraform -chdir=${{ env.TF_DIR }} show -no-color tfplan > $GITHUB_WORKSPACE/plan-${{ matrix.environment }}.txt
          echo "‚úÖ Plan done for ${{ matrix.environment }}"

      - name: Add Approval Instructions
        if: github.event.inputs.action != 'plan'
        run: echo -e "\n\n---\nüí¨ **Approval Required**\nPlease comment 'yes' to approve or 'no' to cancel." >> plan-${{ matrix.environment }}.txt

      - name: Create Approval Issue
        if: github.event.inputs.action != 'plan'
        id: create_issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Terraform Approval Required: ${{ github.event.inputs.action }} ‚Üí ${{ matrix.environment }}"
          content-filepath: plan-${{ matrix.environment }}.txt
          labels: terraform, approval
          assignees: ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Approval
        if: github.event.inputs.action != 'plan'
        id: wait
        run: |
          issue_number=${{ steps.create_issue.outputs.issue-number }}
          echo "Waiting for approval on Issue #$issue_number..."
          for i in {1..30}; do
            comment=$(gh issue view $issue_number --json comments --jq '.comments[-1].body' || echo "")
            if [[ "$comment" =~ ^[Yy][Ee][Ss]$ ]]; then
              echo "approval=yes" >> $GITHUB_OUTPUT
              break
            elif [[ "$comment" =~ ^[Nn][Oo]$ ]]; then
              echo "approval=no" >> $GITHUB_OUTPUT
              break
            fi
            sleep 20
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Close (Approved)
        if: steps.wait.outputs.approval == 'yes'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ steps.create_issue.outputs.issue-number }}
          comment: |
            ‚úÖ Approved and executed Terraform **${{ github.event.inputs.action }}**
            Environment: **${{ matrix.environment }}**
            Approved by: @${{ github.actor }}

      - name: Auto Close (Declined)
        if: steps.wait.outputs.approval == 'no'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ steps.create_issue.outputs.issue-number }}
          comment: |
            ‚ùå Terraform **${{ github.event.inputs.action }}** cancelled by @${{ github.actor }}
            Environment: **${{ matrix.environment }}**

      - name: Terraform Apply
        if: steps.wait.outputs.approval == 'yes' && github.event.inputs.action == 'apply'
        run: |
          terraform -chdir=${{ env.TF_DIR }} workspace select ${{ matrix.environment }}
          terraform -chdir=${{ env.TF_DIR }} apply -auto-approve -var-file=env/${{ matrix.environment }}.tfvars

      - name: Terraform Destroy
        if: steps.wait.outputs.approval == 'yes' && github.event.inputs.action == 'destroy'
        run: |
          terraform -chdir=${{ env.TF_DIR }} workspace select ${{ matrix.environment }}
          terraform -chdir=${{ env.TF_DIR }} destroy -auto-approve -var-file=env/${{ matrix.environment }}.tfvars